@model dynamic
@using Microsoft.AspNetCore.Http;
@{ 
    string str = Model.Chats.User1 != Context.Session.GetString("email") ? @Model.Chats.User1 : Model.Chats.User2;
}
<head>
    <link rel="stylesheet" href="~/css/ChatPage.css" />
    <script src="~/js/ChatPage.js"></script>
</head>

<div class="app">
    @*<div class="header">
            <div class="logo">
                <svg viewBox="0 0 513 513" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path d="M256.025.05C117.67-2.678 3.184 107.038.025 245.383a240.703 240.703 0 0085.333 182.613v73.387c0 5.891 4.776 10.667 10.667 10.667a10.67 10.67 0 005.653-1.621l59.456-37.141a264.142 264.142 0 0094.891 17.429c138.355 2.728 252.841-106.988 256-245.333C508.866 107.038 394.38-2.678 256.025.05z" />
                    <path d="M330.518 131.099l-213.825 130.08c-7.387 4.494-5.74 15.711 2.656 17.97l72.009 19.374a9.88 9.88 0 007.703-1.094l32.882-20.003-10.113 37.136a9.88 9.88 0 001.083 7.704l38.561 63.826c4.488 7.427 15.726 5.936 18.003-2.425l65.764-241.49c2.337-8.582-7.092-15.72-14.723-11.078zM266.44 356.177l-24.415-40.411 15.544-57.074c2.336-8.581-7.093-15.719-14.723-11.078l-50.536 30.744-45.592-12.266L319.616 160.91 266.44 356.177z" fill="#fff" />
                </svg>
            </div>
            <div class="search-bar">
                <input type="text" placeholder="Search..." />
            </div>
            <div class="user-settings">
                <div class="dark-light">
                    <svg viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z" />
                    </svg>
                </div>
                <div class="settings">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="3" />
                        <path d="M19.4 15a1.65 1.65 0 00.33 1.82l.06.06a2 2 0 010 2.83 2 2 0 01-2.83 0l-.06-.06a1.65 1.65 0 00-1.82-.33 1.65 1.65 0 00-1 1.51V21a2 2 0 01-2 2 2 2 0 01-2-2v-.09A1.65 1.65 0 009 19.4a1.65 1.65 0 00-1.82.33l-.06.06a2 2 0 01-2.83 0 2 2 0 010-2.83l.06-.06a1.65 1.65 0 00.33-1.82 1.65 1.65 0 00-1.51-1H3a2 2 0 01-2-2 2 2 0 012-2h.09A1.65 1.65 0 004.6 9a1.65 1.65 0 00-.33-1.82l-.06-.06a2 2 0 010-2.83 2 2 0 012.83 0l.06.06a1.65 1.65 0 001.82.33H9a1.65 1.65 0 001-1.51V3a2 2 0 012-2 2 2 0 012 2v.09a1.65 1.65 0 001 1.51 1.65 1.65 0 001.82-.33l.06-.06a2 2 0 012.83 0 2 2 0 010 2.83l-.06.06a1.65 1.65 0 00-.33 1.82V9a1.65 1.65 0 001.51 1H21a2 2 0 012 2 2 2 0 01-2 2h-.09a1.65 1.65 0 00-1.51 1z" />
                    </svg>
                </div>
                <img class="user-profile" src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/3364143/download+%281%29.png" alt="" class="account-profile" alt="">
            </div>
        </div>*@
    <div class="wrapper">
        <div class="chat-area">
            <div class="chat-area-header">
                <div class="chat-area-title">@(Model.Chats.User1 != Context.Session.GetString("email") ? @Model.Chats.User1 : Model.Chats.User2)</div>
            </div>
            <div class="chat-area-main" id="chat-body" style="overflow: auto">
                @foreach (var message in Model.Chats.Messages)
                {
                    <div class="chat-msg @(message.SenderEmail == Context.Session.GetString("email") ? "owner" : "")">
                        <div class="chat-msg-profile">
                            @*<img class="chat-msg-img" src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/3364143/download+%283%29+%281%29.png" alt="" />*@
                            <div class="chat-msg-date">@message.Time</div>
                        </div>
                        <div class="chat-msg-content">
                            <div class="chat-msg-text">@message.Content</div>
                        </div>
                    </div>
                }
            </div>
            <div class="chat-area-footer">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-video">
                    <path d="M23 7l-7 5 7 5V7z" />
                    <rect x="1" y="5" width="15" height="14" rx="2" ry="2" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-image">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                    <circle cx="8.5" cy="8.5" r="1.5" />
                    <path d="M21 15l-5-5L5 21" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-plus-circle">
                    <circle cx="12" cy="12" r="10" />
                    <path d="M12 8v8M8 12h8" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-paperclip">
                    <path d="M21.44 11.05l-9.19 9.19a6 6 0 01-8.49-8.49l9.19-9.19a4 4 0 015.66 5.66l-9.2 9.19a2 2 0 01-2.83-2.83l8.49-8.48" />
                </svg>
                <form method="post" class="input-group" onsubmit="sendMessage(event)">
                    <input type="hidden" name="chatId" value="@Model.Chats.Id" />
                    <input id="message-input" type="text" placeholder="Type something here..." name="message" class="form-control" />
                    <div class="input-group-append">

                        <button class="btn btn-light" type="submit">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-send" viewBox="0 0 16 16">
                                <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576 6.636 10.07Zm6.787-8.201L1.591 6.602l4.339 2.76 7.494-7.493Z" />
                            </svg>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="messages-section">
    <button class="messages-close">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x-circle">
            <circle cx="12" cy="12" r="10" />
            <line x1="15" y1="9" x2="9" y2="15" />
            <line x1="9" y1="9" x2="15" y2="15" />
        </svg>
    </button>
    <div class="projects-section-header">
        <p>Liên hệ</p>
    </div>
    <div class="messages">
        @foreach (var item in Model.Friends)
        {
            <div class="message-box">
                <img src="@item.GetType().GetProperty("AvatarURL").GetValue(item, null)" alt="profile image">
                <div class="message-content">
                    <a href="/Chat/ChatPageGUI?ChatId=@item.GetType().GetProperty("ChatId").GetValue(item, null)">
                        <div class="message-header">
                            <div class="name">@item.GetType().GetProperty("name").GetValue(item, null)</div>
                        </div>
                    </a>
                    <p class="message-line" @(item.GetType().GetProperty("FriendEmail").GetValue(item, null) == str ? "id=last-message" : "")>
                        @item.GetType().GetProperty("LastMessage").GetValue(item, null)
                    </p>
                    <p class="message-line time" @(item.GetType().GetProperty("FriendEmail").GetValue(item, null) == str ? "id=last-time" : "")>
                        @item.GetType().GetProperty("LastTime").GetValue(item, null)
                    </p>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="~/js/signalr.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script>
        var element = document.getElementById("chat-body");
        element.scrollTop = element.scrollHeight;
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();
        var _connectionId = '';
        connection.on("RecieveMessage", function (data) {
            //var message = messageBuilder()
            //    .createMessage()
            //    .withHeader(data.name)
            //    .withParagraph(data.text)
            //    .withFooter(data.timestamp)
            //    .build();
            //document.querySelector('.chat-body').append(message);
            @*<div class="chat-msg @(message.SenderEmail == Context.Session.GetString("email") ? "owner" : "")">
                        <div class="chat-msg-profile">
                            <img class="chat-msg-img" src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/3364143/download+%283%29+%281%29.png" alt="" />
                            <div class="chat-msg-date">@message.Time</div>
                        </div>
                        <div class="chat-msg-content">
                            <div class="chat-msg-text">@message.Content</div>
                        </div>
                    </div>*@
            var message = document.createElement("div");
            message.classList.add('chat-msg');
            if (data.senderEmail == "@Context.Session.GetString("email")")
                message.classList.add('owner');

            var msgprofile = document.createElement("div");
            msgprofile.classList.add('chat-msg-profile');


            var msgDate = document.createElement('div');
            msgDate.classList.add('chat-msg-date');
            msgDate.appendChild(document.createTextNode(data.time));
            msgprofile.appendChild(msgDate);

            var msgContent = document.createElement('div');
            msgContent.classList.add('chat-msg-content');
            var msgText = document.createElement('div');
            msgText.classList.add('chat-msg-text');
            msgText.appendChild(document.createTextNode(data.content));
            msgContent.appendChild(msgText);

            message.appendChild(msgprofile);
            message.appendChild(msgContent);


            document.getElementById('chat-body').append(message);
            document.getElementById('last-message').innerHTML = String(data.content);
            document.getElementById('last-time').innerHTML = data.time;
            var element = document.getElementById("chat-body");
            element.scrollTop = element.scrollHeight;
            console.log(data);
        });
        connection.start()
            .then(function () {

                //connection.invoke('joinRoom', '@Model.Chats.Id');
                connection.invoke('getConnectionId',)
                    .then(function (connectionId) {
                        _connectionId = connectionId;
                        joinRoom();
                    });

            })
            .catch(function (err) {
                console.log(err)
            });
        window.addEventListener('onunload', function () {
            //connection.invoke('leaveRoom', '@Model.Chats.Id');
        });
        var joinRoom = function () {
            var url = '/Chat/JoinRoom/' + _connectionId + '/@Model.Chats.Id';
            axios.post(url, null)
                .then(res => {
                    console.log("Room joined", res);
                })
                .catch(function (err) {
                    console.log(err)
                });
        }

        var sendMessage = function (event) {
            event.preventDefault();
            var data = new FormData(event.target);
            document.getElementById('message-input').value = '';
            axios.post('/Chat/SendMessage', data)
                .then(res => {
                    console.log("Message Sent!")
                })
                .catch(err => {
                    console.log("Failed to send message!")
                })
        };
    </script>
}